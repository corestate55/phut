#!/usr/bin/env ruby
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'gli'
require 'phut'
require 'pio'
require 'socket'

module Trema
  # The base class of Trema controller. Subclass and override handlers
  # to implement a custom OpenFlow controller.
  class Controller
    include Pio

    DEFAULT_TCP_PORT = 6633
    READ_CHUNK_SIZE = 1024 * 4

    # rubocop:disable TrivialAccessors
    def self.inherited(subclass)
      @controller = subclass
    end
    # rubocop:enable TrivialAccessors

    def self.start
      @controller.new.run
    end

    def run
      socket = TCPServer.open('<any>', DEFAULT_TCP_PORT)
      @client = socket.accept

      __send__ :start if respond_to?(:start)
      receive_send_hello
      send_receive_echo
      features_reply = send_receive_features
      __send__ :switch_ready, features_reply.datapath_id

      start_main_loop
    end

    private

    def receive_send_hello
      Hello.read @client.readpartial(READ_CHUNK_SIZE)
      @client.write Hello.new.to_binary
    end

    def send_receive_echo
      @client.write Echo::Request.new.to_binary
      Echo::Reply.read @client.readpartial(READ_CHUNK_SIZE)
    end

    def send_receive_features
      @client.write Features::Request.new.to_binary
      Features::Reply.read @client.readpartial(READ_CHUNK_SIZE)
    end

    def start_main_loop
      sleep
    end

    def info(message)
      puts message
    end

    def send_flow_mod_add(_dpid, options)
      flow_mod = FlowMod.new(
                   buffer_id: 0xffffffff,
                   match: options.fetch(:match),
                   command: :add,
                   actions: options.fetch(:actions)
                 )
      @client.write flow_mod.to_binary
    end
  end
end

# OpenFlow controller framework.
module Trema
  VERSION = '0.1.0'.freeze

  # trema command.
  module App
    extend GLI::App

    program_desc 'Trema command-line tool'

    version Trema::VERSION

    desc 'Runs a trema application'
    arg_name 'controller'
    command :run do |c|
      c.desc 'Specifies emulated network configuration'
      c.flag [:c, :conf]

      c.action do |_global_options, options, args|
        Signal.trap('SIGINT') do
          $stderr.puts 'Interrupted.'
          exit 0
        end

        Phut.run(options[:conf]) do
          load args[0]
          Trema::Controller.start
        end
      end
    end

    default_command :help

    exit run(ARGV)
  end
end
